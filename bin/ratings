#!/usr/bin/env perl
use warnings;
use strict;

# ratings --- Given the numbers, respectively, of one- through
# five-star reviews, calculate the lower bound of the average star
# rating where we want to be 95% confident we're at or above the lower
# bound.
#
# This is the "average rating" you actually want to sort by.

use FindBin;
use lib "${FindBin::Bin}/../lib";

use Math::WilsonScore qw(ratingLowerBound
                         starRatingLowerBound);
use Term::Cap;
use POSIX qw();

my (@ratings) = @ARGV;
my ($lowerBound, $average) = ratingLowerBound(@ratings);
my ($starLowerBound, $starAverage) = starRatingLowerBound(@ratings);

my $termios = POSIX::Termios->new();
$termios->getattr();
my $ospeed = $termios->getospeed();
my $terminal = Term::Cap->Tgetent({ TERM => undef, OSPEED => $ospeed });

my $bold  = $terminal->Tputs('md');
my $reset = $terminal->Tputs('me');

if (!-t 1) {
    $bold = '';
    $reset = '';
}

printf('%4d ', $_) foreach @ratings;
printf('=> %.3f', $lowerBound);
if (scalar @ratings == 5) {
    printf(' = %s%4.2f out of 5 stars%s',
           $bold,
           (1 + $lowerBound * 4),
           $reset);
}
print("\n");

printf('%*s => %.3f', (5 * scalar(@ratings) - 1), 'dumb avg', $average);
if (scalar @ratings == 5) {
    printf('   %4.2f', (1 + $average * 4));
}
print("\n");
